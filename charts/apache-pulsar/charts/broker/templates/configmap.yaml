{{- $brokerConfigValues := omit .Values.global.broker.config "extraConfigValues" -}}

{{/*{{- $_ := set $brokerConfigValues "bindAddress" (coalesce .Values.config.bindAddress "0.0.0.0") -}}*/}}
{{- $_ := set $brokerConfigValues "bookkeeperMetadataServiceUri" (coalesce .Values.config.bookkeeperMetadataServiceUri (printf "zk://%s/ledgers" (include "broker.config.bookkeeperMetadataServiceUri" $))) -}}
{{- $_ := unset $brokerConfigValues "bootstrapNamespaces" -}}

{{- $_ := set $brokerConfigValues "brokerServicePort" .Values.containerPorts.pulsar -}}
{{- $_ := set $brokerConfigValues "brokerServicePortTls" "" -}}

{{- $_ := set $brokerConfigValues "clusterName" (coalesce .Values.config.clusterName (include "cluster.name" .)) -}}
{{- $_ := set $brokerConfigValues "configurationMetadataStoreUrl" (coalesce .Values.config.configurationMetadataStoreUrl (printf "%s/ledgers" (include "broker.config.configurationMetadataStoreUrl" $))) -}}
{{- $_ := set $brokerConfigValues "functionsWorkerEnabled" (coalesce .Values.config.functionsWorkerEnabled (include "broker.config.functionWorkerEnabled" .)) -}}
{{- $_ := set $brokerConfigValues "metadataStoreUrl" (coalesce .Values.config.metadataStoreUrl (printf "%s/ledgers" (include "broker.config.metadataStoreUrl" $))) -}}

{{- $_ := set $brokerConfigValues "webServicePort" .Values.containerPorts.http -}}
{{- $_ := set $brokerConfigValues "webServicePortTls" "" -}}

{{- $_ := set $brokerConfigValues "webServiceUrl" (printf "http://localhost:%d/" ($brokerConfigValues.webServicePort | int)) -}}
{{- $_ := set $brokerConfigValues "brokerServiceUrl" (printf "pulsar://localhost:%d/" ($brokerConfigValues.brokerServicePort | int)) -}}

{{- if eq (include "common.tls.require-secure-inter" .) "true" -}}
  {{/* TLS certificate config  */}}
  {{- $_ := set $brokerConfigValues "tlsEnabled" "true" -}}
  {{- $_ := set $brokerConfigValues "tlsCertificateFilePath" (coalesce .Values.config.tlsCertificateFilePath "/pulsar/certs/cer.crt") -}}
  {{- $_ := set $brokerConfigValues "tlsKeyFilePath" (coalesce .Values.config.tlsKeyFilePath "/pulsar/certs/key.crt") -}}
  {{- $_ := set $brokerConfigValues "tlsTrustCertsFilePath" (coalesce .Values.config.tlsTrustCertsFilePath "/pulsar/certs/ca.crt") -}}
  {{- $_ := set $brokerConfigValues "tlsAllowInsecureConnection" (coalesce .Values.config.tlsAllowInsecureConnection "false") -}}
  {{- $_ := set $brokerConfigValues "tlsRequireTrustedClientCertOnConnect" (coalesce .Values.config.tlsRequireTrustedClientCertOnConnect "false") -}}
  {{- $_ := set $brokerConfigValues "tlsEnableHostnameVerification" "false" -}}

  {{/* TLS store config  */}}
  {{- $_ := set $brokerConfigValues "tlsEnabledWithKeyStore" "true" -}}
  {{- $_ := set $brokerConfigValues "tlsKeyStoreType" (coalesce .Values.config.tlsKeyStoreType "JKS") -}}
  {{- $_ := set $brokerConfigValues "tlsKeyStore" (coalesce .Values.config.tlsKeyStore "/pulsar/jks/keystore.jks") -}}
  {{- $_ := set $brokerConfigValues "tlsKeyStorePassword" (coalesce .Values.config.tlsKeyStorePassword "((tlsKeyStorePassword))") -}}

  {{- $_ := set $brokerConfigValues "tlsTrustStoreType" (coalesce .Values.config.tlsTrustStoreType "JKS") -}}
  {{- $_ := set $brokerConfigValues "tlsTrustStore" (coalesce .Values.config.tlsTrustStore "/pulsar/jks/truststore.jks") -}}
  {{- $_ := set $brokerConfigValues "tlsTrustStorePassword" (coalesce .Values.config.tlsTrustStorePassword "((tlsTrustStorePassword))") -}}

  {{/* Broker client config  */}}
  {{- $_ := set $brokerConfigValues "brokerClientTlsEnabled" (coalesce .Values.config.brokerClientTlsEnabled "true") -}}
  {{- $_ := set $brokerConfigValues "brokerClientTrustCertsFilePath" "/pulsar/certs/ca.crt" -}}
  {{- $_ := set $brokerConfigValues "brokerClientTlsEnabledWithKeyStore" (coalesce .Values.config.brokerClientTlsEnabledWithKeyStore "true") -}}
  {{- $_ := set $brokerConfigValues "brokerClientTlsTrustStore" (coalesce .Values.config.brokerClientTlsTrustStore "/pulsar/jks/truststore.jks") -}}
  {{- $_ := set $brokerConfigValues "brokerClientTlsTrustStorePassword" (coalesce .Values.config.brokerClientTlsTrustStorePassword "((brokerClientTlsTrustStorePassword))") -}}
  {{- $_ := set $brokerConfigValues "brokerClientTlsTrustStoreType" (coalesce .Values.config.brokerClientTlsTrustStoreType "JKS") -}}

  {{/* Bookkeeper client config  */}}
  {{- $_ := set $brokerConfigValues "bookkeeperTLSProviderFactoryClass" "org.apache.bookkeeper.tls.TLSContextFactory" -}}
  {{- $_ := set $brokerConfigValues "bookkeeperTLSClientAuthentication" "true" -}}
  {{- $_ := set $brokerConfigValues "bookkeeperTLSKeyFileType" "JKS" -}}
  {{- $_ := set $brokerConfigValues "bookkeeperTLSTrustCertTypes" "JKS" -}}
  {{- $_ := set $brokerConfigValues "bookkeeperTLSKeyStorePasswordPath" "/pulsar/jks/jks-password" -}}
  {{- $_ := set $brokerConfigValues "bookkeeperTLSTrustStorePasswordPath" "/pulsar/jks/jks-password" -}}
  {{- $_ := set $brokerConfigValues "bookkeeperTLSKeyFilePath" "/pulsar/certs/key.crt" -}}
  {{- $_ := set $brokerConfigValues "bookkeeperTLSCertificateFilePath" "/pulsar/certs/cer.crt" -}}
  {{- $_ := set $brokerConfigValues "bookkeeperTLSTrustCertsFilePath" "/pulsar/certs/ca.crt" -}}

  {{/* Broker web config  */}}
  {{- $_ := set $brokerConfigValues "webServicePort" "" -}}
  {{- $_ := set $brokerConfigValues "webServicePortTls" .Values.containerPorts.https -}}
  {{- $_ := set $brokerConfigValues "webServiceUrl" (printf "https://localhost:%d/" ($brokerConfigValues.webServicePortTls | int)) -}}

  {{/* Broker binary config  */}}
  {{- $_ := set $brokerConfigValues "brokerServicePort" "" -}}
  {{- $_ := set $brokerConfigValues "brokerServicePortTls" .Values.containerPorts.pulsarSsl -}}
  {{- $_ := set $brokerConfigValues "brokerServiceUrl" (printf "pulsar+ssl://localhost:%d/" ($brokerConfigValues.brokerServicePortTls | int)) -}}
{{- end -}}

{{- if eq true false -}}
  {{- $_ := set $brokerConfigValues "athenzDomainNames" "" -}}
  {{- $_ := set $brokerConfigValues "authenticationEnabled" "" -}}
  {{- $_ := set $brokerConfigValues "authenticationProviders" "" -}}
  {{- $_ := set $brokerConfigValues "authorizationEnabled" "" -}}

  {{- $_ := set $brokerConfigValues "bookkeeperClientAuthenticationParameters" "" -}}
  {{- $_ := set $brokerConfigValues "bookkeeperClientAuthenticationParametersName" "" -}}
  {{- $_ := set $brokerConfigValues "bookkeeperClientAuthenticationPlugin" "" -}}

  {{- $_ := set $brokerConfigValues "brokerClientAuthenticationParameters" "" -}}
  {{- $_ := set $brokerConfigValues "brokerClientAuthenticationPlugin" "" -}}
{{- end -}}

{{- $component := "broker" -}}
{{- $name := (printf "%s-configuration" (include "broker.name" $)) -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $name | quote }}
  namespace: {{ (include "common.names.namespace" .) | quote }}
  labels: {{ include "common.labels.standard" (dict "name" (include "broker.name" .) "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: {{ $component | quote }}
    {{ include "common.tplvalues.render" ( dict "value" .Values.global.commonLabels "context" $ ) | nindent 4 }}
  annotations:
    {{ include "common.tplvalues.render" ( dict "value" .Values.global.commonAnnotations "context" $ ) | nindent 4 }}
data:
  log4j2.yaml: |
    {{ tpl (.Files.Get "files/log4j2.yaml") . | nindent 4 }}
  pulsar_env.sh: |
    {{ tpl (.Files.Get "files/pulsar_env.sh") . | nindent 4 }}
  filesystem_offload_core_site.xml: |
    {{ tpl (.Files.Get "files/filesystem_offload_core_site.xml") . | nindent 4 }}
  broker.conf: |
    {{ include "common.formatting.toToml" (dict "configValues" $brokerConfigValues "context" $) | nindent 4 }}
    {{ if .Values.config.extraConfigValues }}
    {{- include "common.formatting.toToml" (dict "configValues" .Values.config.extraConfigValues "context" $) | nindent 4 -}}
    {{ end }}