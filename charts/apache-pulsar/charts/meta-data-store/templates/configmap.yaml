{{- $configValues := omit .Values.global.metaDataStore.config "extraConfigValues" -}}
{{- $globalConfigValues := omit .Values.global.metaDataStore.globalConfig "extraConfigValues" -}}

{{- $_ := set $configValues "clientPort" (coalesce .Values.config.clientPort .Values.service.ports.client) -}}
{{- $_ := set $configValues "dataDir" (coalesce .Values.config.dataDir .Values.persistence.mountPath) -}}

{{- $_ := set $globalConfigValues "clientPort" (coalesce .Values.config.clientPort .Values.service.ports.client) -}}
{{- $_ := set $globalConfigValues "dataDir" (coalesce .Values.config.dataDir .Values.persistence.mountPathForGlobal) -}}

{{- $_ := unset $configValues "secureClientPort" -}}
{{- $_ := unset $globalConfigValues "secureClientPort" -}}

{{- if eq (include "common.tls.require-secure-inter" .) "true" -}}
  {{/*  Todo: Ideally only the secure port is open but the liveness probe is hardcoded to 2181
  {{- $_ := unset $configValues "clientPort" -}}
  */}}
  {{- $_ := set $configValues "secureClientPort" (coalesce .Values.config.secureClientPort .Values.service.ports.clientTls) -}}
  {{- $_ := set $globalConfigValues "secureClientPort" (coalesce .Values.config.secureClientPort .Values.service.ports.clientTls) -}}
  {{- $_ := set $configValues "leader.closeSocketAsync" "true" -}}
  {{- $_ := set $configValues "learner.closeSocketAsync" "true" -}}
  {{- $_ := set $configValues "serverCnxnFactory" "org.apache.zookeeper.server.NettyServerCnxnFactory" -}}
  
  {{- if gt (add .Values.globalData.replicas .Values.globalData.nonPersistentReplicas) 1 -}}
    {{- $_ := set $configValues "sslQuorum" (coalesce .Values.config.sslQuorum "true") -}}
    {{- $_ := set $configValues "ssl.quorum.trustStore.type" "JKS" -}}
    {{/*  Todo: Zookeeper is using a reverse DNS lookup to decide hostname, which resolves with ip addressing, which the certificate has n o provision for. To set this to "true", core dns needs some tweaking read more: https://github.com/strimzi/strimzi-kafka-operator/issues/3111  */}}
    {{- $_ := set $configValues "ssl.quorum.hostnameVerification" "false" -}}
    {{- $_ := set $configValues "ssl.quorum.keyStore.location" "/pulsar/jks/keystore.jks" -}}
    {{- $_ := set $configValues "ssl.quorum.keyStore.passwordPath" "/pulsar/jks/jks-password" -}}
    {{- $_ := set $configValues "ssl.quorum.trustStore.location" "/pulsar/jks/truststore.jks" -}}
    {{- $_ := set $configValues "ssl.quorum.trustStore.passwordPath" "/pulsar/jks/jks-password" -}}
  {{- else -}}
    {{- $_ := set $configValues "sslQuorum" (coalesce .Values.config.sslQuorum "false") -}}
    {{- $_ := set $configValues "ssl.trustStore.type" "JKS" -}}
    {{/*  Todo: Zookeeper is using a reverse DNS lookup to decide hostname, which resolves with ip addressing, which the certificate has n o provision for. To set this to "true", core dns needs some tweaking read more: https://github.com/strimzi/strimzi-kafka-operator/issues/3111  */}}
    {{- $_ := set $configValues "ssl.hostnameVerification" "false" -}}
    {{- $_ := set $configValues "ssl.keyStore.location" "/pulsar/jks/keystore.jks" -}}
    {{- $_ := set $configValues "ssl.keyStore.passwordPath" "/pulsar/jks/jks-password" -}}
    {{- $_ := set $configValues "ssl.trustStore.location" "/pulsar/jks/truststore.jks" -}}
    {{- $_ := set $configValues "ssl.trustStore.passwordPath" "/pulsar/jks/jks-password" -}}
  {{- end -}}
{{- end -}}

{{- $clusterAddresses := (include "meta-data-store.quorum-cluster-addresses" $ | fromJson) -}}
{{- range $idx,$address := $clusterAddresses -}}
  {{- $_ := set $configValues (printf "server.%s" $idx) $address -}}
{{- end -}}

{{- $component := "meta-data-store" -}}
{{- $name := (printf "%s-configuration" (include "meta-data-store.name" $)) -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $name | quote }}
  namespace: {{ (include "common.names.namespace" .) | quote }}
  labels: {{ include "common.labels.standard" (dict "name" (include "meta-data-store.name" .) "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: {{ $component | quote }}
    {{ include "common.tplvalues.render" ( dict "value" .Values.global.commonLabels "context" $ ) | nindent 4 }}
  annotations:
    {{ include "common.tplvalues.render" ( dict "value" .Values.global.commonAnnotations "context" $ ) | nindent 4 }}
data:
  log4j2.yaml: |
    {{ tpl (.Files.Get "files/log4j2.yaml") . | nindent 4 }}
  pulsar_env.sh: |
    {{ tpl (.Files.Get "files/pulsar_env.sh") . | nindent 4 }}
  zookeeper.conf: |
    {{- include "common.formatting.toToml" (dict "configValues" $configValues "context" $) | nindent 4 -}}
    {{ if .Values.config.extraConfigValues }}
    {{- include "common.formatting.toToml" (dict "configValues" .Values.config.extraConfigValues "context" $) | nindent 4 -}}
    {{ end }}
  global_zookeeper.conf: |
    {{- include "common.formatting.toToml" (dict "configValues" $globalConfigValues "context" $) | nindent 4 -}}
    {{ if .Values.globalConfig.extraConfigValues }}
    {{- include "common.formatting.toToml" (dict "configValues" .Values.globalConfig.extraConfigValues "context" $) | nindent 4 -}}
    {{ end }}